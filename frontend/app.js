const tg = window.Telegram.WebApp;
tg.expand();
tg.ready();

// === –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Mini App –ø—Ä–∏ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ ===
(async () => {
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞
    const res = await fetch('/version.txt', { cache: 'no-store' });
    if (!res.ok) return;
    const serverVersion = (await res.text()).trim();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –≤ localStorage
    const localVersion = localStorage.getItem('frontend_version');

    // –ï—Å–ª–∏ –≤–µ—Ä—Å–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å ‚Üí –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if (localVersion && localVersion !== serverVersion) {
      console.log('üîÑ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º Mini App...');
      localStorage.setItem('frontend_version', serverVersion);
      location.reload(true);
    } else {
      localStorage.setItem('frontend_version', serverVersion);
    }
  } catch (err) {
    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–∏:', err);
  }
})();


let currentProduct = null;
let selectedSize = null;
let cart = [];
let allProducts = [];
let pageHistory = ['home'];

// ========== –õ–û–ö–ê–õ–¨–ù–û–ï –•–†–ê–ù–ò–õ–ò–©–ï ==========
function loadCart() {
    const savedCart = localStorage.getItem('calistor_cart');
    if (savedCart) cart = JSON.parse(savedCart);
    updateCartCount();
}

function saveCart() {
    localStorage.setItem('calistor_cart', JSON.stringify(cart));
    updateCartCount();
}

function updateCartCount() {
    const count = cart.reduce((total, item) => total + item.quantity, 0);
    const cartCountElement = document.getElementById('cart-count');
    const cartButton = document.getElementById('cart-button');

    if (cartCountElement) {
        cartCountElement.textContent = count;
    }

    if (cartButton) {
        if (count > 0) {
            cartButton.classList.add('visible');
        } else {
            cartButton.classList.remove('visible');
        }
    }
}
// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ Telegram WebApp URL
function getQueryParams() {
  const params = new URLSearchParams(window.location.search);
  return Object.fromEntries(params.entries());
}

const query = getQueryParams();
const initialProductId = query.product_id ? parseInt(query.product_id) : null;

document.addEventListener("DOMContentLoaded", () => {
  loadCart();
  loadMainBanner();

  fetch("/api/products")
    .then(res => res.json())
    .then(products => {
      allProducts = products;
      renderProducts(products);

      // üü¢ –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª –ø–∞—Ä–∞–º–µ—Ç—Ä product_id ‚Äî —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
      if (initialProductId) {
        const product = allProducts.find(p => p.id === initialProductId);
        if (product) showProductDetail(product);
      }
    })
    .catch(err => console.error(err));
});



// ========== –ù–ê–í–ò–ì–ê–¶–ò–Ø ==========
function showPage(pageName) {
  const pages = document.querySelectorAll('.page');
  pages.forEach(page => {
    page.classList.remove('active');
  });

  const targetPage = document.getElementById(`${pageName}-page`);
  if (targetPage) {
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –∞–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ–ª–∞ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å
    setTimeout(() => {
      targetPage.classList.add('active');
      window.scrollTo(0, 0); // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
    }, 50);
  }
}

function goBack() {
    if (pageHistory.length > 1) {
        pageHistory.pop();
        const prev = pageHistory[pageHistory.length - 1];
        showPage(prev);
    } else {
        showPage('home');
    }
}

// ========== –ó–ê–ì–†–£–ó–ö–ê –¢–û–í–ê–†–û–í ==========
document.addEventListener('DOMContentLoaded', function () {
    function loadMainBanner() {
        const bannerImg = document.getElementById('main-banner');
        if (bannerImg) {
            const timestamp = new Date().getTime();
            bannerImg.src = `/static/images/banner.webp?t=${timestamp}`;
            console.log("–ë–∞–Ω–Ω–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω —Å –æ–±—Ö–æ–¥–æ–º –∫—ç—à–∞.");
        }
    }

    loadCart();
    loadMainBanner();

    fetch("/api/products")
        .then(res => {
            if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤');
            return res.json();
        })
        .then(products => {
            allProducts = products;
            renderProducts(products);
        })
        .catch(error => {
            console.error('Error:', error);
            const productList = document.getElementById("product-list");
            if (productList) {
                productList.innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤</p>';
            }
        });
});

// ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö –†–ê–ó–ú–ï–†–û–í ==========
document.addEventListener('click', function (e) {
    if (e.target.classList.contains('size-btn')) {
        document.querySelectorAll('.size-btn').forEach(btn => btn.classList.remove('selected'));
        e.target.classList.add('selected');
        selectedSize = e.target.dataset.size;
        const actions = document.querySelector('.product-actions');
        if (actions) {
            actions.classList.add('visible');
        }
    }
});

// ========== –†–ï–ù–î–ï–† –¢–û–í–ê–†–û–í ==========
function renderProducts(products) {
    const container = document.getElementById("product-list");
    if (!container) return;

    container.innerHTML = products.map(product => {
        const mainImage = product.images && product.images.length > 0
            ? product.images[0]
            : product.image;

        return `
    <div class="product" onclick="openProduct(${product.id})">
        <img src="${mainImage}" alt="${product.name}" onerror="this.src='/static/images/placeholder.webp'" />
        <h3>${product.name}</h3>
        <p>${product.price}‚ÇΩ</p>
    </div>
  `;
    }).join("");

}

// ========== –°–¢–†–ê–ù–ò–¶–ê –¢–û–í–ê–†–ê ==========
function openProduct(productId) {
    const product = allProducts.find(p => p.id === productId);
    if (product) {
        showProductDetail(product);
    }
}

function showProductDetail(product) {
    currentProduct = product;
    selectedSize = null;

    // --- –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç ---
    document.getElementById('product-title').textContent = product.name;
    document.getElementById('product-price').textContent = product.price;
    document.getElementById('product-color').textContent = product.color;
    document.getElementById('product-composition').textContent = product.composition;
    document.getElementById('product-description-text').textContent = product.description;

    // const actions = document.querySelector('.product-actions');
    // if (actions) actions.classList.remove('visible');


    // --- –†–∞–∑–º–µ—Ä—ã ---
    const sizeButtonsContainer = document.getElementById('size-buttons');
    const availableSizes = product.sizes || [];
    if (availableSizes.length > 0) {
        sizeButtonsContainer.innerHTML = availableSizes
            .map(size => `<button class="size-btn" data-size="${size}">${size}</button>`)
            .join('');
    } else {
        sizeButtonsContainer.innerHTML = '<p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤</p>';
    }

    // --- –ì–∞–ª–µ—Ä–µ—è ---
    const galleryImages =
        product.images_large ||
        product.images ||
        [product.image_large || product.image];

    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª –ø—Ä–∏ –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!galleryImages || galleryImages.length === 0) {
        galleryImages = ["/static/images/placeholder.webp"];
    }

    // –ü–µ—Ä–µ–¥–∞—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ initGallery
    initGallery(galleryImages);

    // --- –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ ---
    showPage('product');
}

// ========== –ì–ê–õ–ï–†–ï–Ø ==========
function initGallery(images) {
    if (!images || !images.length) return;

    let idx = 0;
    const main = document.getElementById('gallery-main');
    const thumbs = document.getElementById('gallery-thumbs');

    function renderThumbs() {
        thumbs.innerHTML = '';
        images.forEach((src, i) => {
            const t = document.createElement('img');
            t.src = src;
            t.className = 'thumb' + (i === idx ? ' active' : '');
            t.addEventListener('click', () => { idx = i; update(); });
            thumbs.appendChild(t);
        });
    }

    function update() {
        main.src = images[idx];
        [...document.querySelectorAll('.thumb')].forEach((el, i) =>
            el.classList.toggle('active', i === idx)
        );
    }

    // üü¢ –°–≤–∞–π–ø –∂–µ—Å—Ç—ã
    let startX = 0;
    main.addEventListener('touchstart', (e) => { startX = e.touches[0].clientX; });
    main.addEventListener('touchend', (e) => {
        const endX = e.changedTouches[0].clientX;
        const diff = endX - startX;
        if (Math.abs(diff) > 50) { // —Å–≤–∞–π–ø
            idx = (idx + (diff > 0 ? -1 : 1) + images.length) % images.length;
            update();
        }
    });

    renderThumbs();
    update();
}


// ========== –ö–û–†–ó–ò–ù–ê ==========
function addToCartFromCard(productId) {
    const product = allProducts.find(p => p.id === productId);
    if (!product) return;

    const availableSizes = product.sizes || [];
    if (availableSizes.length === 1) {
        const autoSize = availableSizes[0];
        const cartItem = {
            id: Date.now(),
            productId: product.id,
            name: product.name,
            price: product.price,
            size: autoSize,
            color: product.color,
            image: product.image,
            quantity: 1
        };
        cart.push(cartItem);
        saveCart();

        tg.showPopup({
            title: "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É",
            message: `${product.name} (${autoSize}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!`,
            buttons: [{ type: "ok" }]
        });
    } else if (availableSizes.length > 1) {
        openProduct(productId);
        tg.showPopup({
            title: "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä",
            message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞",
            buttons: [{ type: "ok" }]
        });
    } else {
        tg.showPopup({
            title: "–û—à–∏–±–∫–∞",
            message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞",
            buttons: [{ type: "ok" }]
        });
    }
}
function buyNow(productId) {
    const product = allProducts.find(p => p.id === productId);
    if (!product) return;

    addToCartFromCard(productId);
    openCart();
}

function addToCartFromDetail() {
    if (!currentProduct) return;

    if (!selectedSize) {
        tg.showPopup({
            title: "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä",
            message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É",
            buttons: [{ type: "ok" }]
        });
        
    }

    const cartItem = {
        id: Date.now(),
        productId: currentProduct.id,
        name: currentProduct.name,
        price: currentProduct.price,
        size: selectedSize,
        color: currentProduct.color,
        image: currentProduct.image,
        quantity: 1
    };

    cart.push(cartItem);
    saveCart();

    tg.showPopup({
        title: "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É",
        message: `${currentProduct.name} (${selectedSize}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!`,
        buttons: [{ type: "ok" }]
    });
}

function openCart() {
    renderCart();
    showPage('cart');
}

function renderCart() {
    const cartContainer = document.getElementById('cart-items');
    const emptyCart = document.getElementById('empty-cart');
    const totalPriceElement = document.getElementById('total-price');

    if (!cartContainer || !emptyCart || !totalPriceElement) return;

    if (cart.length === 0) {
        cartContainer.innerHTML = '';
        emptyCart.style.display = 'block';
        totalPriceElement.textContent = '0';
        return;
    }

    emptyCart.style.display = 'none';
    const totalPrice = cart.reduce((total, item) => total + item.price * item.quantity, 0);
    totalPriceElement.textContent = totalPrice;

    cartContainer.innerHTML = cart.map(item => `
        <div class="cart-item">
            <img src="${item.image}" alt="${item.name}" class="cart-item-image" onerror="this.src='/static/images/placeholder.webp'">
            <div class="cart-item-info">
                <div class="cart-item-name">${item.name}</div>
                <div class="cart-item-details">–†–∞–∑–º–µ—Ä: ${item.size} | –¶–≤–µ—Ç: ${item.color}</div>
                <div class="cart-item-price">${item.price}‚ÇΩ</div>
            </div>
            <button class="cart-item-remove" onclick="removeFromCart(${item.id})">üóëÔ∏è</button>
        </div>
    `).join('');
}

function removeFromCart(itemId) {
    cart = cart.filter(item => item.id !== itemId);
    saveCart();
    renderCart();
}

// ========== –û–§–û–†–ú–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê ==========
function checkout() {
    if (cart.length === 0) {
        tg.showAlert("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!");
        return;
    }

    const totalPrice = cart.reduce((t, i) => t + i.price * i.quantity, 0);
    const user = tg.initDataUnsafe.user || {};
    const orderData = {
        products: cart,
        total_price: totalPrice,
        user
    };

    tg.showConfirm("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä—É?", (confirmed) => {
        if (!confirmed) return;
        tg.MainButton.showProgress();

        fetch("/api/order", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(orderData)
        })
            .then(res => res.json())
            .then(data => {
                tg.MainButton.hideProgress();
                if (data.status === "success") {
                    cart = [];
                    saveCart();
                    renderCart();
                    showPage('home');
                    tg.showAlert("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
                } else throw new Error(data.detail);
            })
            .catch(error => {
                tg.MainButton.hideProgress();
                tg.showAlert("‚ùå –û—à–∏–±–∫–∞: " + error.message);
            });
    });
}
function shareProduct() {
  if (!currentProduct) return;

  const botUsername = "botchickcalis_bot";
  const link = `https://t.me/${botUsername}?start=store_${currentProduct.id}`;
  const text = `üëï ${currentProduct.name} ‚Äî ${currentProduct.price}‚ÇΩ\n${currentProduct.description}\n\n${link}`;

  tg.showPopup({
    title: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–æ–≤–∞—Ä–æ–º",
    message: "–°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å –¥—Ä—É–≥—É –≤ Telegram:",
    buttons: [
      { id: "copy", type: "ok", text: "üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É" },
      { type: "cancel", text: "–ó–∞–∫—Ä—ã—Ç—å" }
    ]
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
  window.Telegram.WebApp.onEvent('popupClosed', function (event) {
    if (event.button_id === "copy") {
      navigator.clipboard.writeText(link);
      tg.showAlert("–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!");
    }
  });
}

function sendToFriend() {
  if (!currentProduct) return;

  tg.showPopup({
    title: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É",
    message: "–í–≤–µ–¥–∏ @username –¥—Ä—É–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @rustem)",
    buttons: [
      { id: "send", type: "ok", text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" },
      { type: "cancel" },
    ]
  });

  // ‚ö†Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –≤–≤–æ–¥ ‚Äî –º–æ–∂–Ω–æ –ø–æ–∑–∂–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ñ–æ—Ä–º—É Telegram WebAppInput
  // –î–ª—è —Ç–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏–º –ø—Ä—è–º–æ —Å–µ–±–µ:
  const chatId = tg.initDataUnsafe?.user?.id; // –ø–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–æ–º—É —Å–µ–±–µ

  fetch("/api/share", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      chat_id: chatId,
      product_id: currentProduct.id
    })
  })
    .then(res => res.json())
    .then(data => {
      tg.showAlert("‚úÖ –¢–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
    })
    .catch(err => {
      console.error(err);
      tg.showAlert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ");
    });
}

