from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from dotenv import load_dotenv
import os

# –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å requests —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏
try:
    import requests
    REQUESTS_AVAILABLE = True
except ImportError:
    REQUESTS_AVAILABLE = False
    print("‚ö†Ô∏è  –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'requests' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install requests")

load_dotenv()

app = FastAPI()

# –†–∞–∑—Ä–µ—à–∞–µ–º CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º –ø–∞–ø–∫—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∫–∞–∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="../frontend"), name="static")

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
products = [
    {
        "id": 1,
        "name": "–§—É—Ç–±–æ–ª–∫–∞ box-fit",
        "price": 4000,
        "color": "–±–µ–ª—ã–π", 
        "size": "one size",
        "image": "/static/images/products/wewe-small.webp",
        "image_large": "/static/images/products/large.webp",
        "composition": "95% —Ö–ª–æ–ø–æ–∫, 5% –ª–∞–π–∫—Ä–∞",
        "description": "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∫—Ä–æ—è."
    },
    {
        "id": 2,
        "name": "–§—É—Ç–±–æ–ª–∫–∞ box-fit",
        "price": 4000,
        "color": "–±–µ–ª—ã–π", 
        "size": "one size",
        "image": "/static/images/products/dada-small.webp",
        "image_large": "/static/images/products/dada-large.webp",
        "composition": "95% —Ö–ª–æ–ø–æ–∫, 5% –ª–∞–π–∫—Ä–∞",
        "description": "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∫—Ä–æ—è."
    },
    {
        "id": 3,
        "name": "–§—É—Ç–±–æ–ª–∫–∞ box-fit",
        "price": 4000,
        "color": "–±–µ–ª—ã–π", 
        "size": "one size",
        "image": "/static/images/products/obraz1.webp",
        "image_large": "/static/images/products/obraz2.webp",
        "composition": "95% —Ö–ª–æ–ø–æ–∫, 5% –ª–∞–π–∫—Ä–∞",
        "description": "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∫—Ä–æ—è."
    },
    {
        "id": 4,
        "name": "–§—É—Ç–±–æ–ª–∫–∞ box-fit",
        "price": 4000,
        "color": "–±–µ–ª—ã–π", 
        "size": "one size",
        "image": "/static/images/products/kaif1.webp",
        "image_large": "/static/images/products/kaif.webp",
        "composition": "95% —Ö–ª–æ–ø–æ–∫, 5% –ª–∞–π–∫—Ä–∞",
        "description": "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∫—Ä–æ—è."
    },
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
]
# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –æ—Ç–¥–∞–µ–º HTML
@app.get("/")
def serve_frontend():
    return FileResponse("../frontend/index.html")

# API endpoint –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
@app.get("/api/products")
def get_products():
    return products

# –û—Ç–¥–∞–µ–º –¥—Ä—É–≥–∏–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-—Ñ–∞–π–ª—ã
@app.get("/style.css")
def serve_css():
    return FileResponse("../frontend/style.css")

@app.get("/app.js")
def serve_js():
    return FileResponse("../frontend/app.js")

# Endpoint –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
@app.post("/api/order")
async def create_order(order_data: dict):
    try:
        if not REQUESTS_AVAILABLE:
            raise HTTPException(
                status_code=500, 
                detail="–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install requests"
            )
        
        bot_token = os.getenv("BOT_TOKEN")
        manager_chat_id = os.getenv("MANAGER_CHAT_ID")
        
        if not bot_token:
            raise HTTPException(
                status_code=500, 
                detail="BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª"
            )
        
        if not manager_chat_id:
            raise HTTPException(
                status_code=500, 
                detail="MANAGER_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª"
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = format_order_message(order_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        payload = {
            "chat_id": manager_chat_id,
            "text": message,
            "parse_mode": "HTML"
        }
        
        response = requests.post(url, json=payload)
        
        if response.status_code == 200:
            return {"status": "success", "message": "Order sent to manager"}
        else:
            error_info = response.json()
            raise HTTPException(
                status_code=500, 
                detail=f"Telegram API error: {error_info.get('description', 'Unknown error')}"
            )
            
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

def format_order_message(order_data):
    products = order_data.get("products", [])
    user_info = order_data.get("user", {})
    total_price = order_data.get("total_price", 0)
    
    message = "üõçÔ∏è <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó –ò–ó MINI APP</b>\n\n"
    message += "<b>–¢–æ–≤–∞—Ä—ã:</b>\n"
    
    for i, product in enumerate(products, 1):
        message += f"{i}. {product['name']}\n"
        message += f"   ‚Ä¢ –†–∞–∑–º–µ—Ä: {product['size']}\n"
        message += f"   ‚Ä¢ –¶–≤–µ—Ç: {product['color']}\n"
        message += f"   ‚Ä¢ –¶–µ–Ω–∞: {product['price']}‚ÇΩ\n\n"
    
    message += f"üí∞ <b>–ò—Ç–æ–≥–æ: {total_price}‚ÇΩ</b>\n\n"
    message += "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ:</b>\n"
    message += f"üë§ ID: {user_info.get('id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    message += f"üìõ –ò–º—è: {user_info.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    message += f"üìû Username: @{user_info.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    
    return message

@app.get("/images/banner.webp")
def serve_banner():
    return FileResponse("../frontend/images/banner.webp")