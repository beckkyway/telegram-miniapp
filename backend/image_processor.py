import os
from PIL import Image
import glob

class ImageProcessor:
    def __init__(self, source_folder="original_images", output_folder="../frontend/images/products"):
        self.source_folder = source_folder
        self.output_folder = output_folder
        self.sizes = {
            'small': (300, 300),   # –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤
            'large': (600, 600)    # –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        }
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        os.makedirs(source_folder, exist_ok=True)
        os.makedirs(output_folder, exist_ok=True)
    
    def resize_and_crop(self, image, target_size):
        """–û–±—Ä–µ–∑–∞–µ—Ç –∏ –∏–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π"""
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
        original_width, original_height = image.size
        target_width, target_height = target_size
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è
        ratio = max(target_width / original_width, target_height / original_height)
        
        # –ù–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        new_width = int(original_width * ratio)
        new_height = int(original_height * ratio)
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
        resized_image = image.resize((new_width, new_height), Image.Resampling.LANCZOS)
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        left = (new_width - target_width) / 2
        top = (new_height - target_height) / 2
        right = (new_width + target_width) / 2
        bottom = (new_height + target_height) / 2
        
        cropped_image = resized_image.crop((left, top, right, bottom))
        return cropped_image
    
    def process_single_image(self, image_path, product_name):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            with Image.open(image_path) as img:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if img.mode in ('RGBA', 'P'):
                    img = img.convert('RGB')
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                for size_name, dimensions in self.sizes.items():
                    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    processed_img = self.resize_and_crop(img, dimensions)
                    
                    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                    base_name = product_name.lower().replace(' ', '-')
                    output_filename = f"{base_name}-{size_name}.webp"
                    output_path = os.path.join(self.output_folder, output_filename)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ WebP —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
                    processed_img.save(
                        output_path, 
                        'WEBP', 
                        quality=85,  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ/—Ä–∞–∑–º–µ—Ä
                        optimize=True
                    )
                    
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ: {output_filename} ({dimensions[0]}x{dimensions[1]})")
                    
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {image_path}: {str(e)}")
            return False
    
    def auto_process_folder(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ"""
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        extensions = ['*.jpg', '*.jpeg', '*.png', '*.webp', '*.JPG', '*.JPEG', '*.PNG']
        
        all_images = []
        for ext in extensions:
            all_images.extend(glob.glob(os.path.join(self.source_folder, ext)))
        
        if not all_images:
            print("üìÅ –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ 'original_images'")
            print("üì∏ –ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤–∞—à–∏ —Ñ–æ—Ç–æ –≤ –ø–∞–ø–∫—É 'backend/original_images/'")
            return
        
        print(f"üîÑ –ù–∞–π–¥–µ–Ω–æ {len(all_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        
        success_count = 0
        for image_path in all_images:
            # –°–æ–∑–¥–∞–µ–º –∏–º—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            filename = os.path.basename(image_path)
            product_name = os.path.splitext(filename)[0]
            
            if self.process_single_image(image_path, product_name):
                success_count += 1
        
        print(f"\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: {success_count}/{len(all_images)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        self.show_created_files()
    
    def show_created_files(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        webp_files = glob.glob(os.path.join(self.output_folder, "*.webp"))
        if webp_files:
            print("\nüìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
            for file in webp_files:
                file_size = os.path.getsize(file) / 1024  # —Ä–∞–∑–º–µ—Ä –≤ KB
                print(f"   üìÑ {os.path.basename(file)} ({file_size:.1f} KB)")
    
    def get_image_paths_for_api(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ API"""
        webp_files = glob.glob(os.path.join(self.output_folder, "*.webp"))
        product_data = {}
        
        for file_path in webp_files:
            filename = os.path.basename(file_path)
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ —Ä–∞–∑–º–µ—Ä –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            parts = filename.replace('.webp', '').split('-')
            product_name = '-'.join(parts[:-1])  # –≤—Å–µ —á–∞—Å—Ç–∏ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π (—Ä–∞–∑–º–µ—Ä–∞)
            size = parts[-1]
            
            if product_name not in product_data:
                product_data[product_name] = {}
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            relative_path = f"/static/images/products/{filename}"
            product_data[product_name][size] = relative_path
        
        return product_data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
def process_images():
    processor = ImageProcessor()
    processor.auto_process_folder()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç–∏ –¥–ª—è API
    product_paths = processor.get_image_paths_for_api()
    if product_paths:
        print("\nüñº –ü—É—Ç–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ API:")
        for product, sizes in product_paths.items():
            print(f"\nüì¶ {product}:")
            for size, path in sizes.items():
                print(f"   {size}: '{path}'")

if __name__ == "__main__":
    process_images()